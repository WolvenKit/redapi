type User {
  GlobalId: ID!
  Username: String!
  GlobalName: String!
  Avatar: String
  DiscordiD: String!
  Theme: String
  Style: String
  Descryption: String
  GithubUsername: String
  NexusModsUsername: String
  NexusMods: [NexusMods]
  Github: [Github]
  Roles: [Roles]
}

type UserResponse {
  Status: Error!
  GlobalId: ID!
  Username: String!
  GlobalName: String!
  Avatar: String
  DiscordiD: String!
  Theme: String
  Style: String
  Descryption: String
  GithubUsername: String
  NexusModsUsername: String
  NexusMods: [NexusMods]
  Github: [Github]
  Roles: [Roles]
}

type Github {
  Name: String!
  Issues: Int!
  Commits: Int!
}

type Roles {
  icon: String
  name: String!
  iconUrl: String
  position: Int!
  rawPosition: Int!
}

type NexusModsMods {
  Game: String!
  Name: String!
  ModId: Int!
  Status: String!
  Summary: String!
  Version: String!
  Downloads: Int!
  PictureUrl: String!
  ModCategory: String!
  AdultContent: Boolean!
  Endorsements: Int!
}

type NexusModsUser {
  Name: String!
  About: String
  Kudos: Int!
  Posts: Int!
  Avatar: String!
  Country: String
  MemberId: Int!
  ModCount: Int!
  UniqueModDownloads: Int!
}

type NexusMods {
  Mods: [NexusModsMods!]
  User: NexusModsUser
}

type Register {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type Auth {
  DiscordId: String!
  JWT: String!
}

type Quote {
  Status: Error!
  Quote: String!
  Responder: String!
}

input UserName {
  Username: String
  GlobalName: String
}

type LinkRole {
  Id: String!
  Name: String!
  position: Int!
  rawPosition: Int!
  icon: String
  iconUrl: String
}

input InputEventSetter {
  ban: Boolean
  categoryChannelCreated: Boolean
  categoryChannelDeleted: Boolean
  categoryChannelUpdated: Boolean
  duplicationChecker: Boolean
  guildJoin: Boolean
  join: Boolean
  kick: Boolean
  mark: Boolean
  messageDelete: Boolean
  messageUpdate: Boolean
  quickCommands: Boolean
  quote: Boolean
  suggenstions_handle: Boolean
  textChannelCreate: Boolean
  textChannelDelete: Boolean
  textChannelUpdate: Boolean
  threadCreate: Boolean
  threadDelete: Boolean
  threadUpdate: Boolean
  userBan: Boolean
  userCheck: Boolean
  userJoined: Boolean
  userRemoved: Boolean
  userUnban: Boolean
}

input InputInteractionSetter {
  Avatar: Boolean
  Clean: Boolean
  Clear: Boolean
  Core: Boolean
  Developer: Boolean
  Discord: Boolean
  Emoji: Boolean
  Infos: Boolean
  Mute: Boolean
  Remind: Boolean
  Repeat: Boolean
  Sync: Boolean
  Teams: Boolean
  Who: Boolean
}

type EventSetter {
  ban: Boolean
  categoryChannelCreated: Boolean
  categoryChannelDeleted: Boolean
  categoryChannelUpdated: Boolean
  duplicationChecker: Boolean
  guildJoin: Boolean
  join: Boolean
  kick: Boolean
  mark: Boolean
  messageDelete: Boolean
  messageUpdate: Boolean
  quickCommands: Boolean
  quote: Boolean
  suggenstions_handle: Boolean
  textChannelCreate: Boolean
  textChannelDelete: Boolean
  textChannelUpdate: Boolean
  threadCreate: Boolean
  threadDelete: Boolean
  threadUpdate: Boolean
  userBan: Boolean
  userCheck: Boolean
  userJoined: Boolean
  userRemoved: Boolean
  userUnban: Boolean
}

type InteractionSetter {
  Avatar: Boolean
  Clean: Boolean
  Clear: Boolean
  Core: Boolean
  Developer: Boolean
  Discord: Boolean
  Emoji: Boolean
  Infos: Boolean
  Mute: Boolean
  Remind: Boolean
  Repeat: Boolean
  Sync: Boolean
  Teams: Boolean
  Who: Boolean
}

type Setting {
  GuildId: String!
  ModifiedSetting: String!
  Set: Boolean!
}

type MessageComparison {
  Duplicate: Boolean!
}

type SettingResponse {
  Status: Error!
  GuildId: String
  RestrictedQuotesChannels: String
  MarkedMembersChannel: String
  ModerationCategory: String
  ModerationLog: String
  MarkedMembersRole: String
  Event: EventSetter
  Interaction: InteractionSetter
}

type Warning {
  DiscordId: String!
  Username: String!
  Reason: String
  Issuer: String!
  IssuedTime: String
}

type WarningResponse {
  Status: Error!
  Warnings: [Warning]
}

type Error {
  code: Int!
  success: Boolean!
  message: String!
}

type MessageComparisonResponse {
  Status: Error!
  Duplicate: Boolean!
}

type Mutation {
  LinkUser(
    DiscordId: String!
    Name: UserName
    Image: String
    NexusModsUsername: String
    GithubUsername: String
    Theme: String
    Description: String
    NameStyle: String
    Roles: String
  ): UserResponse

  Warning(DiscordId: String!, Username: String!, Reason: String, Issuer: String!): WarningResponse

  Quote(Quote: String!, Responder: String!): Quote
  MessageComparison(Content: String!, UserId: String!): MessageComparisonResponse
  Settings(
    GuildId: String!
    RestrictedQuotesChannels: String
    MarkedMembersChannel: String
    ModerationCategory: String
    ModerationLog: String
    MarkedMembersRole: String
    Event: InputEventSetter
    Interaction: InputInteractionSetter
  ): SettingResponse
}

type Query {
  Info: String
  User(page: Int): [User!]!
  Me: Auth!
  UserByJWT(JWT: String!): User
  UserByDiscordId(id: String!): User
  Quotes(page: Int): [Quote]
  QuoteById(id: Int!): Quote
}